generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  emailVerified  Boolean    @default(false)
  image          String?
  onlineStatus   Boolean    @default(false)
  lastSeen       DateTime   @default(now())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  sessions       Session[]
  accounts       Account[]
  messages       Message[]
  chatRooms      ChatRoom[] @relation("ChatRoomMembers")
  ownedChatRooms ChatRoom[] @relation("ChatRoomOwner")

  @@map("user")
}

model Account {
  id                    String   @id @default(uuid())
  provider              String   
  providerAccountId     String   
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("account")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model ChatRoom {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  owner       User      @relation("ChatRoomOwner", fields: [ownerId], references: [id])
  members     User[]    @relation("ChatRoomMembers")
  messages    Message[]
}

model Message {
  id         String   @id @default(cuid())
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  chatRoomId String
  user       User     @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
}
